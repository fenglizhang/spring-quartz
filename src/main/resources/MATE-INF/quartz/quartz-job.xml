<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
 http://www.springframework.org/schema/context
  http://www.springframework.org/schema/context/spring-context-4.1.xsd">

	<!-- 扫包，注入service层 -->
	<context:component-scan base-package="com.zhanglf" />

	<!--*******************@第一种job********************** -->
	<!-- 我定义了一个对象和它对象的方法，如果我们需要把它封装成一个job，就把类名和对应的方法穿进去就行了，这里用name或者id来唯一标志一个bean都是可以的。 -->
	<bean name="printJob" class="com.zhanglf.quartz.MethodInvokingJobDetileFactoryBeanPrintJob"></bean>
	<!-- 第一种定时轮循的方法是用 MethodInvokingJobDetileFactoryBean。这种是最简单的 -->
	<bean name="autoPrintJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="printJob" /><!-- 指定自定义类 -->
		</property>
		<property name="targetMethod">
			<value>sayHello</value><!-- 指定方法名 -->
		</property>
		<!-- 配置是否阻塞线程，即一个一个的调用，还是不等第一个完成就可以执行第二个，false表示阻塞执行。多个job不会并发执行，第二个不会再第一个job完成前执行 ，第二种方式没有这种配置-->
		<property name="concurrent" value="false" />
	</bean>

	<!-- 定时触发器 -->
	<bean id="autoPrintJobCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<ref bean="autoPrintJob" />
		</property>
		<property name="cronExpression">
			<value>0/20 * * * * ?</value><!-- 每20秒执行一次 -->
		</property>
	</bean>
	<!--*******************@第一种job********************** 自定义任务类,这里就做个打印吧 -->

	<!-- 第二种定时轮循的方法是用 JobDetileBean。这种不用单独声明自定义类了。直接在属性中赋值为对应类，然后就会走默认的实现方法executeInternal。 -->
	<bean name="autoShowJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass">
			<value>com.zhanglf.quartz.JobDetileBeanPrintJob</value><!-- 指定自定义类 -->
		</property>
		<property name="jobDataAsMap">
			<map>
				<entry key="showService" value-ref="showService" /><!-- 如果需要其他层的注入，则在这里进行注入配，然后给上set方法完成注入。 -->
			</map>
		</property>
		<!-- 使用JobDetailBean不支持这种并发操作 -->
		<!-- <property name="concurrent" value="false"/> -->
	</bean>

	<!-- 定时触发器 -->
	<bean id="autoShowJobCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<ref bean="autoShowJob" />
		</property>
		<property name="cronExpression">
			<value>0/20 * * * * ?</value><!-- 每20秒执行一次 -->
		</property>
	</bean>
	<!-- 第二种定时轮循的方法是用 JobDetileBean。这种不用单独声明自定义类了。直接在属性中赋值为对应类，然后就会走默认的实现方法executeInternal。 -->


	<!-- 任务调度器 -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="autoPrintJobCronTrigger" />
				<ref bean="autoShowJobCronTrigger" />
			</list>
		</property>
	</bean>

</beans>
